[gd_scene load_steps=34 format=2]

[ext_resource path="res://scenes/gameplay/Player/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/gameplay/pause-layer/pause-layer.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/gameplay/Enemy/FishPosition2D.tscn" type="PackedScene" id=3]
[ext_resource path="res://image/kaitei.png" type="Texture" id=4]
[ext_resource path="res://scenes/gameplay/gameplay.gd" type="Script" id=5]
[ext_resource path="res://scenes/UI/UI.tscn" type="PackedScene" id=6]
[ext_resource path="res://scenes/gameplay/ShockLayer.gd" type="Script" id=7]
[ext_resource path="res://scenes/gameplay/Background.gd" type="Script" id=8]
[ext_resource path="res://image/f1_back.png" type="Texture" id=9]
[ext_resource path="res://scenes/gameplay/Enemy/WhiteFish1.tscn" type="PackedScene" id=10]
[ext_resource path="res://scenes/gameplay/Enemy/BlueFish1.tscn" type="PackedScene" id=11]
[ext_resource path="res://scenes/gameplay/Enemy/RedFish1.tscn" type="PackedScene" id=12]
[ext_resource path="res://scenes/gameplay/Enemy/EnemyPosition2D.tscn" type="PackedScene" id=13]
[ext_resource path="res://scenes/gameplay/Enemy/Mob_Red.tscn" type="PackedScene" id=14]
[ext_resource path="res://scenes/gameplay/Enemy/Mob_Blue.tscn" type="PackedScene" id=15]
[ext_resource path="res://scenes/gameplay/Boss/Boss.tscn" type="PackedScene" id=16]
[ext_resource path="res://scenes/gameplay/Enemy/Mob_Black.tscn" type="PackedScene" id=17]
[ext_resource path="res://scenes/gameplay/Enemy/St_EnemyPosition2D.tscn" type="PackedScene" id=18]

[sub_resource type="Shader" id=33]
code = "shader_type canvas_item;

uniform float wave_speed = 3.0; //wave loop speed
uniform float wave_freq = 10.0; //wave vertical freq
uniform float wave_width = 1; //wave width 
void fragment(){
	vec2 scale_UV = SCREEN_UV;
	vec2 wave_uv_offset;
	wave_uv_offset.x = cos((TIME*wave_speed)+UV.x+UV.y*wave_freq*2.0)*wave_width*0.01;
	//COLOR = vec4(wave_uv_offset,0.0,1.0);
	COLOR = texture(SCREEN_TEXTURE,scale_UV+wave_uv_offset);
}"

[sub_resource type="ShaderMaterial" id=34]
shader = SubResource( 33 )
shader_param/wave_speed = 0.6
shader_param/wave_freq = 6.0
shader_param/wave_width = 0.5

[sub_resource type="Shader" id=31]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=32]
shader = SubResource( 31 )
shader_param/angle = -0.1
shader_param/position = 0.1
shader_param/spread = 0.775
shader_param/cutoff = -0.665
shader_param/falloff = 1.0
shader_param/edge_fade = 0.069
shader_param/speed = 6.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 50.0
shader_param/ray2_intensity = 1.0
shader_param/color = Color( 0.65098, 0.654902, 1, 0.317647 )
shader_param/hdr = false
shader_param/seed = 11.0

[sub_resource type="Shader" id=37]
code = "shader_type canvas_item;

uniform vec2 global_position;
uniform vec2 screen_size;
uniform float force;
uniform float size;
uniform float thickness;

void fragment(){
	vec2 center = global_position;
	float ratio = SCREEN_PIXEL_SIZE.x / SCREEN_PIXEL_SIZE.y;
	center.x = center.x / screen_size.x;
	center.x = (center.x - 0.5) / ratio + 0.5;
	center.y = (screen_size.y - center.y) / screen_size.y;
	vec2 scaledUV = (SCREEN_UV - vec2(0.5, 0.0) ) / vec2(ratio, 1.0) + vec2(0.5, 0.0);
	float mask = (1.0 - smoothstep(size-0.1, size, length(scaledUV - center))) * smoothstep(size-thickness-0.1, size-thickness, length(scaledUV - center));
	vec2 disp = normalize(SCREEN_UV - center) * force * mask;
	COLOR = texture(SCREEN_TEXTURE, SCREEN_UV - disp);
}"

[sub_resource type="ShaderMaterial" id=24]
shader = SubResource( 37 )
shader_param/global_position = Vector2( 0, 0 )
shader_param/screen_size = Vector2( 1600, 900 )
shader_param/force = 0.0
shader_param/size = 0.0
shader_param/thickness = 0.1

[sub_resource type="Animation" id=25]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/force")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:material:shader_param/size")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=26]
resource_name = "shockwave"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/force")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.15, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:material:shader_param/size")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 0.15 ]
}

[sub_resource type="Environment" id=27]
background_mode = 4
fog_sun_amount = 0.34
fog_transmit_enabled = true
fog_height_enabled = true
glow_enabled = true
glow_intensity = 0.4
glow_strength = 0.8
glow_blend_mode = 1

[sub_resource type="RectangleShape2D" id=28]
extents = Vector2( 54, 546.5 )

[sub_resource type="RectangleShape2D" id=29]
extents = Vector2( 1127, 64.5 )

[sub_resource type="RectangleShape2D" id=30]
extents = Vector2( 1038, 57.5 )

[sub_resource type="RectangleShape2D" id=38]
extents = Vector2( 58.5, 1187 )

[sub_resource type="Animation" id=35]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("PopSys:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=36]
resource_name = "move"
length = 6.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("PopSys:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 3.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 100 ), Vector2( 0, 800 ) ]
}

[node name="Gameplay" type="Node"]
script = ExtResource( 5 )

[node name="ColorRect3" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 0.909804 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect2" type="ColorRect" parent="."]
material = SubResource( 34 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.0392157, 0.0352941, 0.0352941, 0.768627 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="."]
light_mask = 0
material = SubResource( 32 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -10.0
margin_top = -131.0
margin_right = 17.0
margin_bottom = -459.0
color = Color( 1, 1, 1, 0.168627 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PauseLayer" parent="." instance=ExtResource( 2 )]

[node name="Player" parent="." instance=ExtResource( 1 )]
position = Vector2( 798, 416 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="UI" parent="CanvasLayer" instance=ExtResource( 6 )]

[node name="ShockLayer" type="CanvasLayer" parent="." groups=["shockwave"]]
script = ExtResource( 7 )

[node name="Shockwave" type="ColorRect" parent="ShockLayer"]
material = SubResource( 24 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="ShockLayer/Shockwave"]
anims/RESET = SubResource( 25 )
anims/shockwave = SubResource( 26 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 27 )

[node name="Wall" type="StaticBody2D" parent="."]
position = Vector2( -19, -71 )
collision_layer = 4

[node name="CollisionShape2D2" type="CollisionShape2D" parent="Wall"]
position = Vector2( 1686, 564.5 )
shape = SubResource( 28 )

[node name="CollisionShape2D3" type="CollisionShape2D" parent="Wall"]
position = Vector2( 743, 1050.5 )
shape = SubResource( 29 )

[node name="CollisionShape2D4" type="CollisionShape2D" parent="Wall"]
position = Vector2( 828, 9.5 )
shape = SubResource( 30 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Wall"]
position = Vector2( -64, 536.5 )
shape = SubResource( 28 )

[node name="EraArea2D" type="Area2D" parent="Wall"]
collision_layer = 0
collision_mask = 255

[node name="CollisionShape2D" type="CollisionShape2D" parent="Wall/EraArea2D"]
position = Vector2( -218.5, 476 )
shape = SubResource( 38 )

[node name="Background" type="ParallaxBackground" parent="."]
script = ExtResource( 8 )

[node name="ParallaxLayer" type="ParallaxLayer" parent="Background"]
motion_scale = Vector2( 0.5, 0.5 )
motion_mirroring = Vector2( 2000, 900 )

[node name="Airadventurelevel1" type="Sprite" parent="Background/ParallaxLayer"]
modulate = Color( 0.556863, 0.556863, 0.556863, 1 )
light_mask = 3
texture = ExtResource( 4 )
centered = false

[node name="ParallaxLayer2" type="ParallaxLayer" parent="Background"]
motion_mirroring = Vector2( 2000, 900 )

[node name="Airadventurelevel1" type="Sprite" parent="Background/ParallaxLayer2"]
light_mask = 3
texture = ExtResource( 9 )
centered = false

[node name="EnemyA" parent="." instance=ExtResource( 10 )]
position = Vector2( 1953, 237 )

[node name="FishPosition2D" parent="." instance=ExtResource( 3 )]
position = Vector2( 1935, 55 )

[node name="PopSys" parent="FishPosition2D" index="1"]
Fish = ExtResource( 10 )
min_num = 2
max_num = 4
pop_time = 10

[node name="FishPosition2D2" parent="." instance=ExtResource( 3 )]
position = Vector2( 1951, 56 )

[node name="AnimationPlayer" parent="FishPosition2D2" index="0"]
root_node = NodePath("../../FishPosition2D2")

[node name="PopSys" parent="FishPosition2D2" index="1"]
Fish = ExtResource( 11 )
min_num = 9
max_num = 17
pop_time = 14

[node name="FishPosition2D3" parent="." instance=ExtResource( 3 )]
position = Vector2( 1984, 48 )

[node name="AnimationPlayer" parent="FishPosition2D3" index="0"]
root_node = NodePath("../../FishPosition2D2")
anims/RESET = SubResource( 35 )
anims/move = SubResource( 36 )

[node name="PopSys" parent="FishPosition2D3" index="1"]
Fish = ExtResource( 12 )
pop_time = 22

[node name="Enemy" type="Node2D" parent="."]

[node name="EnemyPosition2D" parent="Enemy" instance=ExtResource( 13 )]
position = Vector2( 1776, 2 )
Enemy = ExtResource( 14 )
min_num = 4
max_num = 6
pop_time = 23
max_pop = 5

[node name="EnemyPosition2D2" parent="Enemy" instance=ExtResource( 13 )]
position = Vector2( 1720, 0 )
Enemy = ExtResource( 15 )
min_num = 3
max_num = 5
pop_time = 25
max_pop = 5

[node name="EnemyPosition2D3" parent="Enemy" instance=ExtResource( 13 )]
position = Vector2( 1824, 0 )
Enemy = ExtResource( 17 )
min_num = 5
max_num = 8
pop_time = 27
max_pop = 5

[node name="EnemyPosition2D4" parent="Enemy" instance=ExtResource( 18 )]
position = Vector2( -8, 7 )
Enemy = ExtResource( 16 )
max_num = 1
pop_time = 140

[node name="TestCamera2D" type="Camera2D" parent="."]
zoom = Vector2( 5, 5 )

[node name="Boss" parent="." instance=ExtResource( 16 )]

[connection signal="area_entered" from="Wall/EraArea2D" to="." method="_on_EraArea2D_area_entered"]

[editable path="FishPosition2D"]
[editable path="FishPosition2D2"]
[editable path="FishPosition2D3"]
